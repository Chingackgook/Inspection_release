{
    "Project_Root": "/mnt/autor_name/haoTingDeWenJianJia/pyvideotrans",
    "API_Calls": [
        {
            "Name": "speech_to_text",
            "Description": "speech_to_text",
            "Code": "\nimport argparse\nimport os\nimport re\nimport subprocess\nimport sys\nimport time\nfrom pathlib import Path\nfrom urllib.parse import parse_qs, urlparse\n\nimport zhconv\n\ndef download_file(url):\n    \"\"\"Downloads a file from a URL and saves it to /content.\"\"\"\n    if sys.platform!='linux':\n        raise Exception('仅在 Google Colab 上可下载文件，其他系统请传递文件绝对路径')\n    parsed_url = urlparse(url)\n    filename = None\n    filepath = None\n    Path('/content').mkdir(exist_ok=True)\n\n    # Case 1: Filename in URL path\n    if parsed_url.path:\n        potential_filename = os.path.basename(parsed_url.path)\n        if '.' in potential_filename:\n            filename = re.sub(r'[^\\w\\-_\\.]', '', potential_filename) # Sanitize filename for Linux\n            filepath = os.path.join('/content', filename)\n\n    # Case 2: Filename in query parameters\n    if not filepath:  # if no filename found in path\n        query_params = parse_qs(parsed_url.query)\n        video_audio_exts = ['mp4', 'mov', 'mkv', 'mpeg', 'avi', 'wmv', 'ts', 'wav', 'flac', 'mp3', 'm4a', 'wma']\n        for param_value in query_params.values():  # Check all the parameter's values\n              for value in param_value: # some parameter may have multiple values, we check all of them\n                  potential_filename_with_ext = None\n                  for ext in video_audio_exts:\n                      if '.' + ext in value :\n                          potential_filename_with_ext = value\n                          break\n                  if potential_filename_with_ext:\n                      filename = re.sub(r'[^\\w\\-_\\.]', '', potential_filename_with_ext)\n                      filepath = os.path.join('/content', filename)\n                      break  # Stop after finding the first valid filename\n\n\n    if filepath and filename:\n        try:\n           subprocess.run(['wget', '-O', filepath , url], check=True, capture_output=True) # Suppress output to avoid verbosity\n           return filepath\n        except subprocess.CalledProcessError as e:\n            print(f\"Error downloading file: {e.stderr.decode()}\")  # Decode stderr for printing\n            return None\n    else:\n        print(\"No valid filename found in URL.\")\n        return None\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(prog='视频翻译pyVideoTrans', description='')\n\n    parser.add_argument('-m', '--model', default='tiny', type=str, choices=['tiny','tiny.en','base','base.en','small','small.en','medium', 'medium.en', 'large-v1', 'large-v2', 'large-v3', 'large-v3-turbo'], help='选择使用哪个模型')\n\n    parser.add_argument('-l', '--language', default='auto', type=str, choices=['zh', 'en', 'ja','ko','ru','fr','de','es','pt','it','id','hi','hu','ms','kk','cs','nl','sv','bn','he','vi','tr','th','ar','auto'], help='选择音视频发音语言')\n\n    parser.add_argument('-f', '--file', default='', type=str,  help='填写要识别创建字幕的音频或视频名称，含后缀，文件请上传到cli.py本文件同目录下, 如果名字含空格或特殊符号，请用英文双引号包括起来')\n\n    parser.add_argument('-d', '--device', default='auto', type=str,choices=['cpu','cuda','auto'],  help='填写要在cpu还是cuda上运行，auto为自动')\n    parser.add_argument('-c', '--compute_type', default='default', type=str,choices=['default','float16','float32','int8','int8_float16','int8_float32'],  help='填写数据类型，最佳为float16，需显卡支持')\n\n    parser.add_argument('-p', '--prompt', default=None, type=str, help='设置prompt，用于模型识别')\n\n    DEFAULT_ARGS = vars(parser.parse_args([]))\n    kw=parser.parse_args()\n    speech_to_text(model_name=kw.model, language=kw.language, prompt=kw.prompt, audio_file=kw.file, device=kw.device, compute_type=kw.compute_type)\n",
            "Path": "/mnt/autor_name/haoTingDeWenJianJia/pyvideotrans/cli.py"
        }
    ],
    "API_Implementations": [
        {
            "Name": "speech_to_text",
            "Description": "speech_to_text",
            "Path": "/mnt/autor_name/haoTingDeWenJianJia/pyvideotrans/cli.py",
            "Implementation": "import argparse\nimport os\nimport re\nimport subprocess\nimport sys\nimport time\nfrom pathlib import Path\nfrom urllib.parse import parse_qs, urlparse\n\nimport zhconv\n\n\ndef speech_to_text(model_name='large-v2',language=\"auto\",prompt=None,audio_file=None,device='cuda',compute_type='float16'):\n    from videotrans.configure import config\n    from videotrans.util import tools\n    from faster_whisper import WhisperModel\n    if audio_file.startswith('http'):\n        audio_file=download_file(audio_file)\n    if not audio_file or not Path(audio_file).exists():\n        raise Exception(f'未找到 {audio_file} ，请传递文件绝对路径或文件是否存在')\n    language=None if not language or language=='auto' else language[:2]\n    model = WhisperModel(\n                model_name,\n                device=device,\n                compute_type=compute_type,\n        download_root=\"./models\",\n        local_files_only=False\n    )\n    Path(config.TEMP_DIR).mkdir(parents=True, exist_ok=True)\n\n\n    stem=Path(audio_file).stem\n    shibie_file=config.TEMP_DIR+f'/{time.time()}.wav'\n\n    tools.runffmpeg(['-y','-i',audio_file,'-ar','16000','-ac','1',shibie_file])\n    segments, info = model.transcribe(\n            shibie_file,\n            beam_size=5,\n            best_of=5,\n            condition_on_previous_text=False,\n            vad_filter=True,\n            vad_parameters=dict(\n                min_speech_duration_ms=500,\n                max_speech_duration_s= float('inf'),\n                min_silence_duration_ms=250,\n                speech_pad_ms=100\n            ),\n            word_timestamps=True,\n            language=language,\n            initial_prompt=prompt if prompt else None\n        )\n    raws=[]\n    for segment in segments:\n        text=zhconv.convert(segment.text, 'zh-hans') if language=='zh' else segment.text\n        startraw=tools.ms_to_time_string(ms=segment.words[0].start*1000)\n        endraw=tools.ms_to_time_string(ms=segment.words[-1].end*1000)\n        raws.append(f'{len(raws)+1}\\n{startraw} --> {endraw}\\n{text.strip()}')\n    output=config.ROOT_DIR+'/../output'\n    Path(output).mkdir(parents=True, exist_ok=True)\n    with open(output+f'/{stem}.srt', 'w', encoding='utf-8') as f:\n        srts=\"\\n\\n\".join(raws)\n        print(srts)\n        f.write(srts)\n        print(f'\\n已保存到 {stem}.srt\\n')\n",
            "Examples": [
                "\n"
            ]
        }
    ]
}