{
    "Project_Root": "/mnt/autor_name/haoTingDeWenJianJia/HivisionIDPhotos",
    "API_Calls": [
        {
            "Name": "Generate_Standard_ID_Photo",
            "Code": "import os\nimport cv2\nimport argparse\nimport numpy as np\nfrom hivision.error import FaceError\nfrom hivision.utils import hex_to_rgb, resize_image_to_kb, add_background, save_image_dpi_to_bytes\nfrom hivision import IDCreator\nfrom hivision.creator.layout_calculator import (\n    generate_layout_array,\n    generate_layout_image,\n)\nfrom hivision.creator.choose_handler import choose_handler\nfrom hivision.utils import hex_to_rgb, resize_image_to_kb\n\n\nINFERENCE_TYPE = [\n    \"idphoto\",\n    \"human_matting\",\n    \"add_background\",\n    \"generate_layout_photos\",\n    \"idphoto_crop\",\n]\nMATTING_MODEL = [\n    \"hivision_modnet\",\n    \"modnet_photographic_portrait_matting\",\n    \"mnn_hivision_modnet\",\n    \"rmbg-1.4\",\n    \"birefnet-v1-lite\",\n]\nFACE_DETECT_MODEL = [\n    \"mtcnn\",\n    \"face_plusplus\",\n    \"retinaface-resnet50\",\n]\nRENDER = [0, 1, 2]\n\nparser = argparse.ArgumentParser(description=\"HivisionIDPhotos 证件照制作推理程序。\")\nparser.add_argument(\n    \"-t\",\n    \"--type\",\n    help=\"请求 API 的种类\",\n    choices=INFERENCE_TYPE,\n    default=\"idphoto\",\n)\nparser.add_argument(\"-i\", \"--input_image_dir\", help=\"输入图像路径\", required=True)\nparser.add_argument(\"-o\", \"--output_image_dir\", help=\"保存图像路径\", required=True)\nparser.add_argument(\"--height\", help=\"证件照尺寸-高\", default=413)\nparser.add_argument(\"--width\", help=\"证件照尺寸-宽\", default=295)\nparser.add_argument(\"-c\", \"--color\", help=\"证件照背景色\", default=\"638cce\")\nparser.add_argument(\"--hd\", type=bool, help=\"是否输出高清照\", default=True)\nparser.add_argument(\n    \"-k\", \"--kb\", help=\"输出照片的 KB 值，仅对换底和制作排版照生效\", default=None\n)\nparser.add_argument(\n    \"-r\",\n    \"--render\",\n    type=int,\n    help=\"底色合成的模式，有 0:纯色、1:上下渐变、2:中心渐变 可选\",\n    choices=RENDER,\n    default=0,\n)\nparser.add_argument(\n    \"--dpi\",\n    type=int,\n    help=\"输出照片的 DPI 值\",\n    default=300,\n)\nparser.add_argument(\n    \"--face_align\",\n    type=bool,\n    help=\"是否进行人脸旋转矫正\",\n    default=False,\n)\nparser.add_argument(\n    \"--matting_model\",\n    help=\"抠图模型权重\",\n    default=\"modnet_photographic_portrait_matting\",\n    choices=MATTING_MODEL,\n)\nparser.add_argument(\n    \"--face_detect_model\",\n    help=\"人脸检测模型\",\n    default=\"mtcnn\",\n    choices=FACE_DETECT_MODEL,\n)\n\nargs = parser.parse_args()\n\n# ------------------- 选择抠图与人脸检测模型 -------------------\ncreator = IDCreator()\nchoose_handler(creator, args.matting_model, args.face_detect_model)\n\nroot_dir = os.path.dirname(os.path.abspath(__file__))\ninput_image = cv2.imread(args.input_image_dir, cv2.IMREAD_UNCHANGED)\n\n# 如果模式是生成证件照\nif args.type == \"idphoto\":\n    # 将字符串转为元组\n    size = (int(args.height), int(args.width))\n    try:\n        result = creator(input_image, size=size, face_alignment=args.face_align)\n    except FaceError:\n        print(\"人脸数量不等于 1，请上传单张人脸的图像。\")\n    else:\n        # 保存标准照\n        save_image_dpi_to_bytes(cv2.cvtColor(result.standard, cv2.COLOR_RGBA2BGRA), args.output_image_dir, dpi=args.dpi)\n\n        # 保存高清照\n        file_name, file_extension = os.path.splitext(args.output_image_dir)\n        new_file_name = file_name + \"_hd\" + file_extension\n        save_image_dpi_to_bytes(cv2.cvtColor(result.hd, cv2.COLOR_RGBA2BGRA), new_file_name, dpi=args.dpi)\n",
            "Description": "这是调用IDCreator类生成标准证件照的代码示例。它使用了hivision库中的IDCreator类和其他相关函数来处理输入图像，并生成标准证件照和高清照。",
            "Path": "/mnt/autor_name/haoTingDeWenJianJia/HivisionIDPhotos/inference.py"
        }
    ],
    "API_Implementations": [
        {
            "Name": "class IDCreator:",
            "Description": "这是生成证件照的接口类",
            "Implementation": "class IDCreator:\n    \n    #证件照创建类，包含完整的证件照流程\n    \n\n    def __init__(self):\n        # 回调时机\n        self.before_all: ContextHandler = None\n        \n        #在所有处理之前，此时图像已经被 resize 到最大边长为 2000\n        \n        self.after_matting: ContextHandler = None\n\n        #在抠图之后，ctx.matting_image 被赋值\n        self.after_detect: ContextHandler = None\n        #在人脸检测之后，ctx.face 被赋值，如果为仅换底，则不会执行此回调\n        self.after_all: ContextHandler = None\n        #在所有处理之后，此时 ctx.result 被赋值\n        # 处理者\n        self.matting_handler: ContextHandler = extract_human\n        self.detection_handler: ContextHandler = detect_face_mtcnn\n        self.beauty_handler: ContextHandler = beauty_face\n        # 上下文\n        self.ctx = None\n\n    def __call__(\n        self,\n        image: np.ndarray,\n        size: Tuple[int, int] = (413, 295),\n        change_bg_only: bool = False,\n        crop_only: bool = False,\n        head_measure_ratio: float = 0.2,\n        head_height_ratio: float = 0.45,\n        head_top_range: float = (0.12, 0.1),\n        face: Tuple[int, int, int, int] = None,\n        whitening_strength: int = 0,\n        brightness_strength: int = 0,\n        contrast_strength: int = 0,\n        sharpen_strength: int = 0,\n        saturation_strength: int = 0,\n        face_alignment: bool = False,\n    ) -> Result:\n        # 证件照处理函数\n        # :param image: 输入图像\n        # :param change_bg_only: 是否只需要抠图\n        # :param crop_only: 是否只需要裁剪\n        # :param size: 输出的图像大小（h,w)\n        # :param head_measure_ratio: 人脸面积与全图面积的期望比值\n        # :param head_height_ratio: 人脸中心处在全图高度的比例期望值\n        # :param head_top_range: 头距离顶部的比例（max,min)\n        # :param face: 人脸坐标\n        # :param whitening_strength: 美白强度\n        # :param brightness_strength: 亮度强度\n        # :param contrast_strength: 对比度强度\n        # :param sharpen_strength: 锐化强度\n        # :param align_face: 是否需要人脸矫正\n\n        # :return: 返回处理后的证件照和一系列参数\n        # 0.初始化上下文\n        params = Params(\n            size=size,\n            change_bg_only=change_bg_only,\n            head_measure_ratio=head_measure_ratio,\n            head_height_ratio=head_height_ratio,\n            head_top_range=head_top_range,\n            crop_only=crop_only,\n            face=face,\n            whitening_strength=whitening_strength,\n            brightness_strength=brightness_strength,\n            contrast_strength=contrast_strength,\n            sharpen_strength=sharpen_strength,\n            saturation_strength=saturation_strength,\n            face_alignment=face_alignment,\n        )\n\n\n        # 总的开始时间\n        total_start_time = time.time()\n        \n        self.ctx = Context(params)\n        ctx = self.ctx\n        ctx.processing_image = image\n        ctx.processing_image = U.resize_image_esp(\n            ctx.processing_image, 2000\n        )  # 将输入图片 resize 到最大边长为 2000\n        ctx.origin_image = ctx.processing_image.copy()\n        self.before_all and self.before_all(ctx)\n\n        # 1. ------------------人像抠图------------------\n        # 如果仅裁剪，则不进行抠图\n        if not ctx.params.crop_only:\n            # 调用抠图工作流\n            print(\"[1]  Start Human Matting...\")\n            start_matting_time = time.time()\n            self.matting_handler(ctx)\n            end_matting_time = time.time()\n            print(f\"[1]  Human Matting Time: {end_matting_time - start_matting_time:.3f}s\")\n            self.after_matting and self.after_matting(ctx)\n        # 如果进行抠图\n        else:\n            ctx.matting_image = ctx.processing_image\n\n\n        # 2. ------------------美颜------------------\n        print(\"[2]  Start Beauty...\")\n        start_beauty_time = time.time()\n        self.beauty_handler(ctx)\n        end_beauty_time = time.time()\n        print(f\"[2]  Beauty Time: {end_beauty_time - start_beauty_time:.3f}s\")\n\n        # 如果仅换底，则直接返回抠图结果\n        if ctx.params.change_bg_only:\n            ctx.result = Result(\n                standard=ctx.matting_image,\n                hd=ctx.matting_image,\n                matting=ctx.matting_image,\n                clothing_params=None,\n                typography_params=None,\n                face=None,\n            )\n            self.after_all and self.after_all(ctx)\n            return ctx.result\n\n        # 3. ------------------人脸检测------------------\n        print(\"[3]  Start Face Detection...\")\n        start_detection_time = time.time()\n        self.detection_handler(ctx)\n        end_detection_time = time.time()\n        print(f\"[3]  Face Detection Time: {end_detection_time - start_detection_time:.3f}s\")\n        self.after_detect and self.after_detect(ctx)\n\n        # 3.1 ------------------人脸对齐------------------\n        if ctx.params.face_alignment and abs(ctx.face[\"roll_angle\"]) > 2:\n            print(\"[3.1]  Start Face Alignment...\")\n            start_alignment_time = time.time()\n            from hivision.creator.rotation_adjust import rotate_bound_4channels\n\n            # 根据角度旋转原图和抠图\n            b, g, r, a = cv2.split(ctx.matting_image)\n            ctx.origin_image, ctx.matting_image, _, _, _, _ = rotate_bound_4channels(\n                cv2.merge((b, g, r)),\n                a,\n                -1 * ctx.face[\"roll_angle\"],\n            )\n\n            # 旋转后再执行一遍人脸检测\n            self.detection_handler(ctx)\n            self.after_detect and self.after_detect(ctx)\n            end_alignment_time = time.time()\n            print(f\"[3.1]  Face Alignment Time: {end_alignment_time - start_alignment_time:.3f}s\")\n\n        # 4. ------------------图像调整------------------\n        print(\"[4]  Start Image Post-Adjustment...\")\n        start_adjust_time = time.time()\n        result_image_hd, result_image_standard, clothing_params, typography_params = (\n            adjust_photo(ctx)\n        )\n        end_adjust_time = time.time()\n        print(f\"[4]  Image Post-Adjustment Time: {end_adjust_time - start_adjust_time:.3f}s\")\n\n        # 5. ------------------返回结果------------------\n        ctx.result = Result(\n            standard=result_image_standard,\n            hd=result_image_hd,\n            matting=ctx.matting_image,\n            clothing_params=clothing_params,\n            typography_params=typography_params,\n            face=ctx.face,\n        )\n        self.after_all and self.after_all(ctx)\n\n        # 总的结束时间\n        total_end_time = time.time()\n        print(f\"[Total]  Total Time: {total_end_time - total_start_time:.3f}s\")\n\n        return ctx.result",
            "Path": "/mnt/autor_name/haoTingDeWenJianJia/HivisionIDPhotos/hivision/creator/__init__.py",
            "Examples": [
                {
                    "Description": "这是一个简单的调用该类方法的示例，用来生成证件照。",
                    "Code": "from hivision import IDCreator\n            creator = IDCreator()\nchoose_handler(creator, args.matting_model, args.face_detect_model)\n\nroot_dir = os.path.dirname(os.path.abspath(__file__))\ninput_image = cv2.imread(args.input_image_dir, cv2.IMREAD_UNCHANGED)\n\n# 如果模式是生成证件照\nif args.type == \"idphoto\":\n    # 将字符串转为元组\n    size = (int(args.height), int(args.width))\n    try:\n        result = creator(input_image, size=size, face_alignment=args.face_align)\n    except FaceError:\n        print(\"人脸数量不等于 1，请上传单张人脸的图像。\")\n    else:\n        # 保存标准照\n        save_image_dpi_to_bytes(cv2.cvtColor(result.standard, cv2.COLOR_RGBA2BGRA), args.output_image_dir, dpi=args.dpi)\n\n        # 保存高清照\n        file_name, file_extension = os.path.splitext(args.output_image_dir)\n        new_file_name = file_name + \"_hd\" + file_extension\n        save_image_dpi_to_bytes(cv2.cvtColor(result.hd, cv2.COLOR_RGBA2BGRA), new_file_name, dpi=args.dpi)"
                }
            ]
        }
    ]
}