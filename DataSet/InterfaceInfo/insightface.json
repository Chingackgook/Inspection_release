{
    "Project_Root": "/mnt/autor_name/haoTingDeWenJianJia/insightface/python-package/",
    "API_Calls": [
        {
            "Name": "face_recognition",
            "Description": "调用FaceAnalysis 接口实现了 人脸特征提取与身份比对 功能\n",
            "Code": "import cv2\nimport insightface\nimport numpy as np\nfrom insightface.app import FaceAnalysis\n\n# Initialize face analysis model\napp = FaceAnalysis(name='buffalo_l', providers=['CPUExecutionProvider'])  # Use 'CUDAExecutionProvider' for GPU\napp.prepare(ctx_id=-1)  # ctx_id=-1 for CPU, 0 for GPU\n\ndef get_face_embedding(image_path):\n    \"\"\"Extract face embedding from an image\"\"\"\n    img = cv2.imread(image_path)\n    if img is None:\n        raise ValueError(f\"Could not read image: {image_path}\")\n    \n    faces = app.get(img)\n    \n    if len(faces) < 1:\n        raise ValueError(\"No faces detected in the image\")\n    if len(faces) > 1:\n        print(\"Warning: Multiple faces detected. Using first detected face\")\n    \n    return faces[0].embedding\n\ndef compare_faces(emb1, emb2, threshold=0.65): # Adjust this threshold according to your usecase.\n    \"\"\"Compare two embeddings using cosine similarity\"\"\"\n    similarity = np.dot(emb1, emb2) / (np.linalg.norm(emb1) * np.linalg.norm(emb2))\n    return similarity, similarity > threshold\n\n# Paths to your Indian face images\nimage1_path = \"path/to/face1.jpg\"\nimage2_path = \"path/to/face2.jpg\"\n\ntry:\n    # Get embeddings\n    emb1 = get_face_embedding(image1_path)\n    emb2 = get_face_embedding(image2_path)\n    \n    # Compare faces\n    similarity_score, is_same_person = compare_faces(emb1, emb2)\n    \n    print(f\"Similarity Score: {similarity_score:.4f}\")\n    print(f\"Same person? {'YES' if is_same_person else 'NO'}\")\n    \nexcept Exception as e:\n    print(f\"Error: {str(e)}\")\n",
            "Path": ""
        },
        {
            "Name": "Face_Swapping",
            "Description": "调用FaceAnalysis 接口实现了多人脸替换（Face Swapping） 功能，具体是将图像中检测到的所有人脸替换为指定的源人脸",
            "Code": "import datetime\nimport numpy as np\nimport os\nimport os.path as osp\nimport glob\nimport cv2\nimport insightface\nfrom insightface.app import FaceAnalysis\nfrom insightface.data import get_image as ins_get_image\n\n\nassert insightface.__version__>='0.7'\n\nif __name__ == '__main__':\n    app = FaceAnalysis(name='buffalo_l')\n    app.prepare(ctx_id=0, det_size=(640, 640))\n    swapper = insightface.model_zoo.get_model('inswapper_128.onnx', download=True, download_zip=True)\n\n\n    img = ins_get_image('t1')\n    faces = app.get(img)\n    faces = sorted(faces, key = lambda x : x.bbox[0])\n    assert len(faces)==6\n    source_face = faces[2]\n    res = img.copy()\n    for face in faces:\n        res = swapper.get(res, face, source_face, paste_back=True)\n    cv2.imwrite(\"./t1_swapped.jpg\", res)\n    res = []\n    for face in faces:\n        _img, _ = swapper.get(img, face, source_face, paste_back=False)\n        res.append(_img)\n    res = np.concatenate(res, axis=1)\n    cv2.imwrite(\"./t1_swapped2.jpg\", res)\n\n\n",
            "Path": ""
        }
    ],
    "API_Implementations": [
        {
            "Name": "class FaceAnalysis",
            "Description": "\nFaceAnalysis 是一个用于人脸分析的类，集成人脸检测、关键点识别、性别/年龄预测等功能",
            "Path": "/mnt/autor_name/haoTingDeWenJianJia/insightface/python-package/insightface/app/face_analysis.py",
            "Implementation": "class FaceAnalysis:\n    def __init__(self, name=DEFAULT_MP_NAME, root='~/.insightface', allowed_modules=None, **kwargs):\n        onnxruntime.set_default_logger_severity(3)\n        self.models = {}\n        self.model_dir = ensure_available('models', name, root=root)\n        onnx_files = glob.glob(osp.join(self.model_dir, '*.onnx'))\n        onnx_files = sorted(onnx_files)\n        for onnx_file in onnx_files:\n            model = model_zoo.get_model(onnx_file, **kwargs)\n            if model is None:\n                print('model not recognized:', onnx_file)\n            elif allowed_modules is not None and model.taskname not in allowed_modules:\n                print('model ignore:', onnx_file, model.taskname)\n                del model\n            elif model.taskname not in self.models and (allowed_modules is None or model.taskname in allowed_modules):\n                print('find model:', onnx_file, model.taskname, model.input_shape, model.input_mean, model.input_std)\n                self.models[model.taskname] = model\n            else:\n                print('duplicated model task type, ignore:', onnx_file, model.taskname)\n                del model\n        assert 'detection' in self.models\n        self.det_model = self.models['detection']\n\n\n    def prepare(self, ctx_id, det_thresh=0.5, det_size=(640, 640)):\n        self.det_thresh = det_thresh\n        assert det_size is not None\n        print('set det-size:', det_size)\n        self.det_size = det_size\n        for taskname, model in self.models.items():\n            if taskname=='detection':\n                model.prepare(ctx_id, input_size=det_size, det_thresh=det_thresh)\n            else:\n                model.prepare(ctx_id)\n\n    def get(self, img, max_num=0, det_metric='default'):\n        bboxes, kpss = self.det_model.detect(img,\n                                             max_num=max_num,\n                                             metric=det_metric)\n        if bboxes.shape[0] == 0:\n            return []\n        ret = []\n        for i in range(bboxes.shape[0]):\n            bbox = bboxes[i, 0:4]\n            det_score = bboxes[i, 4]\n            kps = None\n            if kpss is not None:\n                kps = kpss[i]\n            face = Face(bbox=bbox, kps=kps, det_score=det_score)\n            for taskname, model in self.models.items():\n                if taskname=='detection':\n                    continue\n                model.get(img, face)\n            ret.append(face)\n        return ret\n\n    def draw_on(self, img, faces):\n        import cv2\n        dimg = img.copy()\n        for i in range(len(faces)):\n            face = faces[i]\n            box = face.bbox.astype(int)\n            color = (0, 0, 255)\n            cv2.rectangle(dimg, (box[0], box[1]), (box[2], box[3]), color, 2)\n            if face.kps is not None:\n                kps = face.kps.astype(int)\n                #print(landmark.shape)\n                for l in range(kps.shape[0]):\n                    color = (0, 0, 255)\n                    if l == 0 or l == 3:\n                        color = (0, 255, 0)\n                    cv2.circle(dimg, (kps[l][0], kps[l][1]), 1, color,\n                               2)\n            if face.gender is not None and face.age is not None:\n                cv2.putText(dimg,'%s,%d'%(face.sex,face.age), (box[0]-1, box[1]-4),cv2.FONT_HERSHEY_COMPLEX,0.7,(0,255,0),1)\n\n            #for key, value in face.items():\n            #    if key.startswith('landmark_3d'):\n            #        print(key, value.shape)\n            #        print(value[0:10,:])\n            #        lmk = np.round(value).astype(int)\n            #        for l in range(lmk.shape[0]):\n            #            color = (255, 0, 0)\n            #            cv2.circle(dimg, (lmk[l][0], lmk[l][1]), 1, color,\n            #                       2)\n        return dimg\n",
            "Example": [
                "import cv2\\nimport numpy as np\\nimport insightface\\nfrom insightface.app import FaceAnalysis\\nfrom insightface.data import get_image as ins_get_image\\napp = FaceAnalysis(providers=['CUDAExecutionProvider', 'CPUExecutionProvider'])\\napp.prepare(ctx_id=0, det_size=(640, 640))\\nimg = ins_get_image('t1')\\nfaces = app.get(img)\\nrimg = app.draw_on(img, faces)\\ncv2.imwrite(\"./t1_output.jpg\", rimg)"
            ]
        }
    ]
}