{
    "Project_Root": "/mnt/autor_name/haoTingDeWenJianJia/rembg",
    "API_Calls": [
        {
            "Name": "remove_bg_cli",
            "Description": "实现了一个命令行工具，用于进行图像背景移除",
            "Code": "import json\nimport sys\nfrom typing import IO\n\nimport click\n\nfrom rembg.bg import remove\nfrom rembg.session_factory import new_session\nfrom rembg.sessions import sessions_names\n\n\n@click.command(  # type: ignore\n    name=\"i\",\n    help=\"for a file as input\",\n)\n@click.option(\n    \"-m\",\n    \"--model\",\n    default=\"u2net\",\n    type=click.Choice(sessions_names),\n    show_default=True,\n    show_choices=True,\n    help=\"model name\",\n)\n@click.option(\n    \"-a\",\n    \"--alpha-matting\",\n    is_flag=True,\n    show_default=True,\n    help=\"use alpha matting\",\n)\n@click.option(\n    \"-af\",\n    \"--alpha-matting-foreground-threshold\",\n    default=240,\n    type=int,\n    show_default=True,\n    help=\"trimap fg threshold\",\n)\n@click.option(\n    \"-ab\",\n    \"--alpha-matting-background-threshold\",\n    default=10,\n    type=int,\n    show_default=True,\n    help=\"trimap bg threshold\",\n)\n@click.option(\n    \"-ae\",\n    \"--alpha-matting-erode-size\",\n    default=10,\n    type=int,\n    show_default=True,\n    help=\"erode size\",\n)\n@click.option(\n    \"-om\",\n    \"--only-mask\",\n    is_flag=True,\n    show_default=True,\n    help=\"output only the mask\",\n)\n@click.option(\n    \"-ppm\",\n    \"--post-process-mask\",\n    is_flag=True,\n    show_default=True,\n    help=\"post process the mask\",\n)\n@click.option(\n    \"-bgc\",\n    \"--bgcolor\",\n    default=(0, 0, 0, 0),\n    type=(int, int, int, int),\n    nargs=4,\n    help=\"Background color (R G B A) to replace the removed background with\",\n)\n@click.option(\"-x\", \"--extras\", type=str)\n@click.argument(\n    \"input\", default=(None if sys.stdin.isatty() else \"-\"), type=click.File(\"rb\")\n)\n@click.argument(\n    \"output\",\n    default=(None if sys.stdin.isatty() else \"-\"),\n    type=click.File(\"wb\", lazy=True),\n)\ndef i_command(model: str, extras: str, input: IO, output: IO, **kwargs) -> None:\n    \"\"\"\n    Click command line interface function to process an input file based on the provided options.\n\n    This function is the entry point for the CLI program. It reads an input file, applies image processing operations based on the provided options, and writes the output to a file.\n\n    Parameters:\n        model (str): The name of the model to use for image processing.\n        extras (str): Additional options in JSON format.\n        input: The input file to process.\n        output: The output file to write the processed image to.\n        **kwargs: Additional keyword arguments corresponding to the command line options.\n\n    Returns:\n        None\n    \"\"\"\n    try:\n        kwargs.update(json.loads(extras))\n    except Exception:\n        pass\n\n    output.write(remove(input.read(), session=new_session(model, **kwargs), **kwargs))\n",
            "Path": "/mnt/autor_name/haoTingDeWenJianJia/rembg/rembg/commands/i_command.py"
        }
    ],
    "API_Implementations": [
        {
            "Name": "remove()",
            "Description": "结合了深度学习模型的高精度识别与传统图像处理技术，提供专业级的背景移除效果",
            "Path": "/mnt/autor_name/haoTingDeWenJianJia/rembg/rembg/bg.py",
            "Implementation": "def remove(\n    data: Union[bytes, PILImage, np.ndarray],\n    alpha_matting: bool = False,\n    alpha_matting_foreground_threshold: int = 240,\n    alpha_matting_background_threshold: int = 10,\n    alpha_matting_erode_size: int = 10,\n    session: Optional[BaseSession] = None,\n    only_mask: bool = False,\n    post_process_mask: bool = False,\n    bgcolor: Optional[Tuple[int, int, int, int]] = None,\n    force_return_bytes: bool = False,\n    *args: Optional[Any],\n    **kwargs: Optional[Any],\n) -> Union[bytes, PILImage, np.ndarray]:\n    \"\"\"\n    Remove the background from an input image.\n\n    This function takes in various parameters and returns a modified version of the input image with the background removed. The function can handle input data in the form of bytes, a PIL image, or a numpy array. The function first checks the type of the input data and converts it to a PIL image if necessary. It then fixes the orientation of the image and proceeds to perform background removal using the 'u2net' model. The result is a list of binary masks representing the foreground objects in the image. These masks are post-processed and combined to create a final cutout image. If a background color is provided, it is applied to the cutout image. The function returns the resulting cutout image in the format specified by the input 'return_type' parameter or as python bytes if force_return_bytes is true.\n\n    Parameters:\n        data (Union[bytes, PILImage, np.ndarray]): The input image data.\n        alpha_matting (bool, optional): Flag indicating whether to use alpha matting. Defaults to False.\n        alpha_matting_foreground_threshold (int, optional): Foreground threshold for alpha matting. Defaults to 240.\n        alpha_matting_background_threshold (int, optional): Background threshold for alpha matting. Defaults to 10.\n        alpha_matting_erode_size (int, optional): Erosion size for alpha matting. Defaults to 10.\n        session (Optional[BaseSession], optional): A session object for the 'u2net' model. Defaults to None.\n        only_mask (bool, optional): Flag indicating whether to return only the binary masks. Defaults to False.\n        post_process_mask (bool, optional): Flag indicating whether to post-process the masks. Defaults to False.\n        bgcolor (Optional[Tuple[int, int, int, int]], optional): Background color for the cutout image. Defaults to None.\n        force_return_bytes (bool, optional): Flag indicating whether to return the cutout image as bytes. Defaults to False.\n        *args (Optional[Any]): Additional positional arguments.\n        **kwargs (Optional[Any]): Additional keyword arguments.\n\n    Returns:\n        Union[bytes, PILImage, np.ndarray]: The cutout image with the background removed.\n    \"\"\"\n    if isinstance(data, bytes) or force_return_bytes:\n        return_type = ReturnType.BYTES\n        img = cast(PILImage, Image.open(io.BytesIO(cast(bytes, data))))\n    elif isinstance(data, PILImage):\n        return_type = ReturnType.PILLOW\n        img = cast(PILImage, data)\n    elif isinstance(data, np.ndarray):\n        return_type = ReturnType.NDARRAY\n        img = cast(PILImage, Image.fromarray(data))\n    else:\n        raise ValueError(\n            \"Input type {} is not supported. Try using force_return_bytes=True to force python bytes output\".format(\n                type(data)\n            )\n        )\n\n    putalpha = kwargs.pop(\"putalpha\", False)\n\n    # Fix image orientation\n    img = fix_image_orientation(img)\n\n    if session is None:\n        session = new_session(\"u2net\", *args, **kwargs)\n\n    masks = session.predict(img, *args, **kwargs)\n    cutouts = []\n\n    for mask in masks:\n        if post_process_mask:\n            mask = Image.fromarray(post_process(np.array(mask)))\n\n        if only_mask:\n            cutout = mask\n\n        elif alpha_matting:\n            try:\n                cutout = alpha_matting_cutout(\n                    img,\n                    mask,\n                    alpha_matting_foreground_threshold,\n                    alpha_matting_background_threshold,\n                    alpha_matting_erode_size,\n                )\n            except ValueError:\n                if putalpha:\n                    cutout = putalpha_cutout(img, mask)\n                else:\n                    cutout = naive_cutout(img, mask)\n        else:\n            if putalpha:\n                cutout = putalpha_cutout(img, mask)\n            else:\n                cutout = naive_cutout(img, mask)\n\n        cutouts.append(cutout)\n\n    cutout = img\n    if len(cutouts) > 0:\n        cutout = get_concat_v_multi(cutouts)\n\n    if bgcolor is not None and not only_mask:\n        cutout = apply_background_color(cutout, bgcolor)\n\n    if ReturnType.PILLOW == return_type:\n        return cutout\n\n    if ReturnType.NDARRAY == return_type:\n        return np.asarray(cutout)\n\n    bio = io.BytesIO()\n    cutout.save(bio, \"PNG\")\n    bio.seek(0)\n\n    return bio.read()\n",
            "Example": [
                "\"\"\"\n去除指定图片的背景\n\"\"\"\n\nfrom pathlib import Path\nfrom rembg import remove\n\n# 配置参数\nINPUT_IMAGE = \"input.jpg\"         # 输入图片路径（默认当前目录下的input.jpg）\nOUTPUT_NAME = \"output.png\"        # 输出文件名（默认output.png）\nMODEL_NAME = \"u2net\"              # 可选模型：u2netp, isnet-general-use 等\n\ndef main():\n    try:\n        # 1. 检查输入文件是否存在\n        input_path = Path(INPUT_IMAGE)\n        if not input_path.exists():\n            raise FileNotFoundError(f\"输入文件 {INPUT_IMAGE} 不存在，请将其放置到当前目录\")\n\n        # 2. 生成输出路径（当前目录下）\n        output_path = Path.cwd() / OUTPUT_NAME\n\n        # 3. 调用 rembg 去除背景\n        print(f\"⏳ 正在处理: {input_path.name} (模型: {MODEL_NAME})...\")\n        with open(input_path, \"rb\") as f_in:\n            output_data = remove(f_in.read(), session_model=MODEL_NAME)\n\n        # 4. 保存结果\n        with open(output_path, \"wb\") as f_out:\n            f_out.write(output_data)\n        \n        print(f\"✅ 处理完成! 输出文件已保存至: {output_path}\")\n\n    except Exception as e:\n        print(f\"❌ 发生错误: {str(e)}\")\n\nif __name__ == \"__main__\":\n    main()\n"
            ]
        }
    ]
}