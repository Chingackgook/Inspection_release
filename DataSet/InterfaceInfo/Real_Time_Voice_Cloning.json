{
    "Project_Root": "/mnt/autor_name/haoTingDeWenJianJia/Real-Time-Voice-Cloning",
    "API_Calls": [
        {
            "Name": "Encoder_Synthesizer_Vocoder",
            "Description": "调用三个顶层接口实现了完整语音合成流程（Encoder → Synthesizer → Vocoder）,语音克隆流程： SpeakerEncoder → 提取声纹嵌入 →Synthesizer(Tacotron) → 文本+声纹嵌入 → 梅尔频谱 → **Vocoder(WaveRNN)** → 梅尔频谱 → 可播放音频",
            "Code": "import argparse\nimport os\nfrom pathlib import Path\n\nimport librosa\nimport numpy as np\nimport soundfile as sf\nimport torch\n\nfrom encoder import inference as encoder\nfrom encoder.params_model import model_embedding_size as speaker_embedding_size\nfrom synthesizer.inference import Synthesizer\nfrom utils.argutils import print_args\nfrom utils.default_models import ensure_default_models\nfrom vocoder import inference as vocoder\n\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    parser.add_argument(\"-e\", \"--enc_model_fpath\", type=Path,\n                        default=\"saved_models/default/encoder.pt\",\n                        help=\"Path to a saved encoder\")\n    parser.add_argument(\"-s\", \"--syn_model_fpath\", type=Path,\n                        default=\"saved_models/default/synthesizer.pt\",\n                        help=\"Path to a saved synthesizer\")\n    parser.add_argument(\"-v\", \"--voc_model_fpath\", type=Path,\n                        default=\"saved_models/default/vocoder.pt\",\n                        help=\"Path to a saved vocoder\")\n    parser.add_argument(\"--cpu\", action=\"store_true\", help=\\\n        \"If True, processing is done on CPU, even when a GPU is available.\")\n    parser.add_argument(\"--no_sound\", action=\"store_true\", help=\\\n        \"If True, audio won't be played.\")\n    parser.add_argument(\"--seed\", type=int, default=None, help=\\\n        \"Optional random number seed value to make toolbox deterministic.\")\n    args = parser.parse_args()\n    arg_dict = vars(args)\n    print_args(args, parser)\n\n    # Hide GPUs from Pytorch to force CPU processing\n    if arg_dict.pop(\"cpu\"):\n        os.environ[\"CUDA_VISIBLE_DEVICES\"] = \"-1\"\n\n    print(\"Running a test of your configuration...\\n\")\n\n    if torch.cuda.is_available():\n        device_id = torch.cuda.current_device()\n        gpu_properties = torch.cuda.get_device_properties(device_id)\n        ## Print some environment information (for debugging purposes)\n        print(\"Found %d GPUs available. Using GPU %d (%s) of compute capability %d.%d with \"\n            \"%.1fGb total memory.\\n\" %\n            (torch.cuda.device_count(),\n            device_id,\n            gpu_properties.name,\n            gpu_properties.major,\n            gpu_properties.minor,\n            gpu_properties.total_memory / 1e9))\n    else:\n        print(\"Using CPU for inference.\\n\")\n\n    ## Load the models one by one.\n    print(\"Preparing the encoder, the synthesizer and the vocoder...\")\n    ensure_default_models(Path(\"saved_models\"))\n    encoder.load_model(args.enc_model_fpath)\n    synthesizer = Synthesizer(args.syn_model_fpath)\n    vocoder.load_model(args.voc_model_fpath)\n\n\n    ## Run a test\n    print(\"Testing your configuration with small inputs.\")\n    # Forward an audio waveform of zeroes that lasts 1 second. Notice how we can get the encoder's\n    # sampling rate, which may differ.\n    # If you're unfamiliar with digital audio, know that it is encoded as an array of floats\n    # (or sometimes integers, but mostly floats in this projects) ranging from -1 to 1.\n    # The sampling rate is the number of values (samples) recorded per second, it is set to\n    # 16000 for the encoder. Creating an array of length <sampling_rate> will always correspond\n    # to an audio of 1 second.\n    print(\"\\tTesting the encoder...\")\n    encoder.embed_utterance(np.zeros(encoder.sampling_rate))\n\n    # Create a dummy embedding. You would normally use the embedding that encoder.embed_utterance\n    # returns, but here we're going to make one ourselves just for the sake of showing that it's\n    # possible.\n    embed = np.random.rand(speaker_embedding_size)\n    # Embeddings are L2-normalized (this isn't important here, but if you want to make your own\n    # embeddings it will be).\n    embed /= np.linalg.norm(embed)\n    # The synthesizer can handle multiple inputs with batching. Let's create another embedding to\n    # illustrate that\n    embeds = [embed, np.zeros(speaker_embedding_size)]\n    texts = [\"test 1\", \"test 2\"]\n    print(\"\\tTesting the synthesizer... (loading the model will output a lot of text)\")\n    mels = synthesizer.synthesize_spectrograms(texts, embeds)\n\n    # The vocoder synthesizes one waveform at a time, but it's more efficient for long ones. We\n    # can concatenate the mel spectrograms to a single one.\n    mel = np.concatenate(mels, axis=1)\n    # The vocoder can take a callback function to display the generation. More on that later. For\n    # now we'll simply hide it like this:\n    no_action = lambda *args: None\n    print(\"\\tTesting the vocoder...\")\n    # For the sake of making this test short, we'll pass a short target length. The target length\n    # is the length of the wav segments that are processed in parallel. E.g. for audio sampled\n    # at 16000 Hertz, a target length of 8000 means that the target audio will be cut in chunks of\n    # 0.5 seconds which will all be generated together. The parameters here are absurdly short, and\n    # that has a detrimental effect on the quality of the audio. The default parameters are\n    # recommended in general.\n    vocoder.infer_waveform(mel, target=200, overlap=50, progress_callback=no_action)\n\n    print(\"All test passed! You can now synthesize speech.\\n\\n\")\n\n\n    ## Interactive speech generation\n    print(\"This is a GUI-less example of interface to SV2TTS. The purpose of this script is to \"\n          \"show how you can interface this project easily with your own. See the source code for \"\n          \"an explanation of what is happening.\\n\")\n\n    print(\"Interactive generation loop\")\n    num_generated = 0\n    while True:\n        try:\n            # Get the reference audio filepath\n            message = \"Reference voice: enter an audio filepath of a voice to be cloned (mp3, \" \\\n                      \"wav, m4a, flac, ...):\\n\"\n            in_fpath = Path(input(message).replace(\"\\\"\", \"\").replace(\"\\'\", \"\"))\n\n            ## Computing the embedding\n            # First, we load the wav using the function that the speaker encoder provides. This is\n            # important: there is preprocessing that must be applied.\n\n            # The following two methods are equivalent:\n            # - Directly load from the filepath:\n            preprocessed_wav = encoder.preprocess_wav(in_fpath)\n            # - If the wav is already loaded:\n            original_wav, sampling_rate = librosa.load(str(in_fpath))\n            preprocessed_wav = encoder.preprocess_wav(original_wav, sampling_rate)\n            print(\"Loaded file succesfully\")\n\n            # Then we derive the embedding. There are many functions and parameters that the\n            # speaker encoder interfaces. These are mostly for in-depth research. You will typically\n            # only use this function (with its default parameters):\n            embed = encoder.embed_utterance(preprocessed_wav)\n            print(\"Created the embedding\")\n\n\n            ## Generating the spectrogram\n            text = input(\"Write a sentence (+-20 words) to be synthesized:\\n\")\n\n            # If seed is specified, reset torch seed and force synthesizer reload\n            if args.seed is not None:\n                torch.manual_seed(args.seed)\n                synthesizer = Synthesizer(args.syn_model_fpath)\n\n            # The synthesizer works in batch, so you need to put your data in a list or numpy array\n            texts = [text]\n            embeds = [embed]\n            # If you know what the attention layer alignments are, you can retrieve them here by\n            # passing return_alignments=True\n            specs = synthesizer.synthesize_spectrograms(texts, embeds)\n            spec = specs[0]\n            print(\"Created the mel spectrogram\")\n\n\n            ## Generating the waveform\n            print(\"Synthesizing the waveform:\")\n\n            # If seed is specified, reset torch seed and reload vocoder\n            if args.seed is not None:\n                torch.manual_seed(args.seed)\n                vocoder.load_model(args.voc_model_fpath)\n\n            # Synthesizing the waveform is fairly straightforward. Remember that the longer the\n            # spectrogram, the more time-efficient the vocoder.\n            generated_wav = vocoder.infer_waveform(spec)\n\n\n            ## Post-generation\n            # There's a bug with sounddevice that makes the audio cut one second earlier, so we\n            # pad it.\n            generated_wav = np.pad(generated_wav, (0, synthesizer.sample_rate), mode=\"constant\")\n\n            # Trim excess silences to compensate for gaps in spectrograms (issue #53)\n            generated_wav = encoder.preprocess_wav(generated_wav)\n\n            # Play the audio (non-blocking)\n            if not args.no_sound:\n                import sounddevice as sd\n                try:\n                    sd.stop()\n                    sd.play(generated_wav, synthesizer.sample_rate)\n                except sd.PortAudioError as e:\n                    print(\"\\nCaught exception: %s\" % repr(e))\n                    print(\"Continuing without audio playback. Suppress this message with the \\\"--no_sound\\\" flag.\\n\")\n                except:\n                    raise\n\n            # Save it on the disk\n            filename = \"demo_output_%02d.wav\" % num_generated\n            print(generated_wav.dtype)\n            sf.write(filename, generated_wav.astype(np.float32), synthesizer.sample_rate)\n            num_generated += 1\n            print(\"\\nSaved output as %s\\n\\n\" % filename)\n\n\n        except Exception as e:\n            print(\"Caught exception: %s\" % repr(e))\n            print(\"Restarting\\n\")\n",
            "Path": "/mnt/autor_name/haoTingDeWenJianJia/Real-Time-Voice-Cloning/demo_cli.py"
        }
    ],
    "API_Implementations": [
        {
            "Name": "class_Synthesizer",
            "Description": "将文本和说话人声纹特征转化为梅尔频谱图，用于语音合成，并提供音频预处理/后处理功能",
            "Path": "/mnt/autor_name/haoTingDeWenJianJia/Real-Time-Voice-Cloning/synthesizer/inference.py",
            "Implementation": "class Synthesizer:\n    sample_rate = hparams.sample_rate\n    hparams = hparams\n\n    def __init__(self, model_fpath: Path, verbose=True):\n        \"\"\"\n        The model isn't instantiated and loaded in memory until needed or until load() is called.\n\n        :param model_fpath: path to the trained model file\n        :param verbose: if False, prints less information when using the model\n        \"\"\"\n        self.model_fpath = model_fpath\n        self.verbose = verbose\n\n        # Check for GPU\n        if torch.cuda.is_available():\n            self.device = torch.device(\"cuda\")\n        else:\n            self.device = torch.device(\"cpu\")\n        if self.verbose:\n            print(\"Synthesizer using device:\", self.device)\n\n        # Tacotron model will be instantiated later on first use.\n        self._model = None\n\n    def is_loaded(self):\n        \"\"\"\n        Whether the model is loaded in memory.\n        \"\"\"\n        return self._model is not None\n\n    def load(self):\n        \"\"\"\n        Instantiates and loads the model given the weights file that was passed in the constructor.\n        \"\"\"\n        self._model = Tacotron(embed_dims=hparams.tts_embed_dims,\n                               num_chars=len(symbols),\n                               encoder_dims=hparams.tts_encoder_dims,\n                               decoder_dims=hparams.tts_decoder_dims,\n                               n_mels=hparams.num_mels,\n                               fft_bins=hparams.num_mels,\n                               postnet_dims=hparams.tts_postnet_dims,\n                               encoder_K=hparams.tts_encoder_K,\n                               lstm_dims=hparams.tts_lstm_dims,\n                               postnet_K=hparams.tts_postnet_K,\n                               num_highways=hparams.tts_num_highways,\n                               dropout=hparams.tts_dropout,\n                               stop_threshold=hparams.tts_stop_threshold,\n                               speaker_embedding_size=hparams.speaker_embedding_size).to(self.device)\n\n        self._model.load(self.model_fpath)\n        self._model.eval()\n\n        if self.verbose:\n            print(\"Loaded synthesizer \\\"%s\\\" trained to step %d\" % (self.model_fpath.name, self._model.state_dict()[\"step\"]))\n\n    def synthesize_spectrograms(self, texts: List[str],\n                                embeddings: Union[np.ndarray, List[np.ndarray]],\n                                return_alignments=False):\n        \"\"\"\n        Synthesizes mel spectrograms from texts and speaker embeddings.\n\n        :param texts: a list of N text prompts to be synthesized\n        :param embeddings: a numpy array or list of speaker embeddings of shape (N, 256)\n        :param return_alignments: if True, a matrix representing the alignments between the\n        characters\n        and each decoder output step will be returned for each spectrogram\n        :return: a list of N melspectrograms as numpy arrays of shape (80, Mi), where Mi is the\n        sequence length of spectrogram i, and possibly the alignments.\n        \"\"\"\n        # Load the model on the first request.\n        if not self.is_loaded():\n            self.load()\n\n        # Preprocess text inputs\n        inputs = [text_to_sequence(text.strip(), hparams.tts_cleaner_names) for text in texts]\n        if not isinstance(embeddings, list):\n            embeddings = [embeddings]\n\n        # Batch inputs\n        batched_inputs = [inputs[i:i+hparams.synthesis_batch_size]\n                             for i in range(0, len(inputs), hparams.synthesis_batch_size)]\n        batched_embeds = [embeddings[i:i+hparams.synthesis_batch_size]\n                             for i in range(0, len(embeddings), hparams.synthesis_batch_size)]\n\n        specs = []\n        for i, batch in enumerate(batched_inputs, 1):\n            if self.verbose:\n                print(f\"\\n| Generating {i}/{len(batched_inputs)}\")\n\n            # Pad texts so they are all the same length\n            text_lens = [len(text) for text in batch]\n            max_text_len = max(text_lens)\n            chars = [pad1d(text, max_text_len) for text in batch]\n            chars = np.stack(chars)\n\n            # Stack speaker embeddings into 2D array for batch processing\n            speaker_embeds = np.stack(batched_embeds[i-1])\n\n            # Convert to tensor\n            chars = torch.tensor(chars).long().to(self.device)\n            speaker_embeddings = torch.tensor(speaker_embeds).float().to(self.device)\n\n            # Inference\n            _, mels, alignments = self._model.generate(chars, speaker_embeddings)\n            mels = mels.detach().cpu().numpy()\n            for m in mels:\n                # Trim silence from end of each spectrogram\n                while np.max(m[:, -1]) < hparams.tts_stop_threshold:\n                    m = m[:, :-1]\n                specs.append(m)\n\n        if self.verbose:\n            print(\"\\n\\nDone.\\n\")\n        return (specs, alignments) if return_alignments else specs\n",
            "Examples": [
                "\n"
            ]
        }
    ]
}