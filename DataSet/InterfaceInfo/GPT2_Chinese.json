{
    "Project_Root": "/mnt/autor_name/haoTingDeWenJianJia/GPT2-Chinese",
    "API_Calls": [
        {
            "Name": "call_generate",
            "Description": "call_generate",
            "Code": "import torch\nimport torch.nn.functional as F\nimport os\nimport argparse\nfrom tqdm import trange\nfrom transformers import GPT2LMHeadModel\n\n\ndef is_word(word):\n    for item in list(word):\n        if item not in 'qwertyuiopasdfghjklzxcvbnm':\n            return False\n    return True\n\n\ndef _is_chinese_char(char):\n    \"\"\"Checks whether CP is the codepoint of a CJK character.\"\"\"\n    # This defines a \"chinese character\" as anything in the CJK Unicode block:\n    #   https://en.wikipedia.org/wiki/CJK_Unified_Ideographs_(Unicode_block)\n    #\n    # Note that the CJK Unicode block is NOT all Japanese and Korean characters,\n    # despite its name. The modern Korean Hangul alphabet is a different block,\n    # as is Japanese Hiragana and Katakana. Those alphabets are used to write\n    # space-separated words, so they are not treated specially and handled\n    # like the all of the other languages.\n    cp = ord(char)\n    if ((cp >= 0x4E00 and cp <= 0x9FFF) or  #\n            (cp >= 0x3400 and cp <= 0x4DBF) or  #\n            (cp >= 0x20000 and cp <= 0x2A6DF) or  #\n            (cp >= 0x2A700 and cp <= 0x2B73F) or  #\n            (cp >= 0x2B740 and cp <= 0x2B81F) or  #\n            (cp >= 0x2B820 and cp <= 0x2CEAF) or\n            (cp >= 0xF900 and cp <= 0xFAFF) or  #\n            (cp >= 0x2F800 and cp <= 0x2FA1F)):  #\n        return True\n\n    return False\n\ndef main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--device', default='0,1,2,3', type=str, required=False, help='生成设备')\n    parser.add_argument('--length', default=-1, type=int, required=False, help='生成长度')\n    parser.add_argument('--batch_size', default=1, type=int, required=False, help='生成的batch size')\n    parser.add_argument('--nsamples', default=10, type=int, required=False, help='生成几个样本')\n    parser.add_argument('--temperature', default=1, type=float, required=False, help='生成温度')\n    parser.add_argument('--topk', default=8, type=int, required=False, help='最高几选一')\n    parser.add_argument('--topp', default=0, type=float, required=False, help='最高积累概率')\n    parser.add_argument('--model_config', default='config/model_config_small.json', type=str, required=False,\n                        help='模型参数')\n    parser.add_argument('--tokenizer_path', default='cache/vocab_small.txt', type=str, required=False, help='词表路径')\n    parser.add_argument('--model_path', default='model/final_model', type=str, required=False, help='模型路径')\n    parser.add_argument('--prefix', default='萧炎', type=str, required=False, help='生成文章的开头')\n    parser.add_argument('--no_wordpiece', action='store_true', help='不做word piece切词')\n    parser.add_argument('--segment', action='store_true', help='中文以词为单位')\n    parser.add_argument('--fast_pattern', action='store_true', help='采用更加快的方式生成文本')\n    parser.add_argument('--save_samples', action='store_true', help='保存产生的样本')\n    parser.add_argument('--save_samples_path', default='.', type=str, required=False, help=\"保存样本的路径\")\n    parser.add_argument('--repetition_penalty', default=1.0, type=float, required=False)\n\n    args = parser.parse_args()\n    print('args:\\n' + args.__repr__())\n\n    if args.segment:\n        from tokenizations import tokenization_bert_word_level as tokenization_bert\n    else:\n        from tokenizations import tokenization_bert\n\n    os.environ[\"CUDA_VISIBLE_DEVICES\"] = args.device  # 此处设置程序使用哪些显卡\n    length = args.length\n    batch_size = args.batch_size\n    nsamples = args.nsamples\n    temperature = args.temperature\n    topk = args.topk\n    topp = args.topp\n    repetition_penalty = args.repetition_penalty\n\n    device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n\n    tokenizer = tokenization_bert.BertTokenizer(vocab_file=args.tokenizer_path)\n    model = GPT2LMHeadModel.from_pretrained(args.model_path)\n    model.to(device)\n    model.eval()\n\n    n_ctx = model.config.n_ctx\n\n    if length == -1:\n        length = model.config.n_ctx\n    if args.save_samples:\n        if not os.path.exists(args.save_samples_path):\n            os.makedirs(args.save_samples_path)\n        samples_file = open(args.save_samples_path + '/samples.txt', 'w', encoding='utf8')\n    while True:\n        raw_text = args.prefix\n        context_tokens = tokenizer.convert_tokens_to_ids(tokenizer.tokenize(raw_text))\n        generated = 0\n        for _ in range(nsamples // batch_size):\n            out = generate(\n                n_ctx=n_ctx,\n                model=model,\n                context=context_tokens,\n                length=length,\n                is_fast_pattern=args.fast_pattern, tokenizer=tokenizer,\n                temperature=temperature, top_k=topk, top_p=topp, repitition_penalty=repetition_penalty, device=device\n            )\n            for i in range(batch_size):\n                generated += 1\n                text = tokenizer.convert_ids_to_tokens(out)\n                for i, item in enumerate(text[:-1]):  # 确保英文前后有空格\n                    if is_word(item) and is_word(text[i + 1]):\n                        text[i] = item + ' '\n                for i, item in enumerate(text):\n                    if item == '[MASK]':\n                        text[i] = ''\n                    elif item == '[CLS]':\n                        text[i] = '\\n\\n'\n                    elif item == '[SEP]':\n                        text[i] = '\\n'\n                info = \"=\" * 40 + \" SAMPLE \" + str(generated) + \" \" + \"=\" * 40 + \"\\n\"\n                print(info)\n                text = ''.join(text).replace('##', '').strip()\n                print(text)\n                if args.save_samples:\n                    samples_file.write(info)\n                    samples_file.write(text)\n                    samples_file.write('\\n')\n                    samples_file.write('=' * 90)\n                    samples_file.write('\\n' * 2)\n        print(\"=\" * 80)\n        if generated == nsamples:\n            # close file when finish writing.\n            if args.save_samples:\n                samples_file.close()\n            break\n\n\nif __name__ == '__main__':\n    main()\n",
            "Path": "/mnt/autor_name/haoTingDeWenJianJia/GPT2-Chinese/generate.py"
        }
    ],
    "API_Implementations": [
        {
            "Name": "generate",
            "Description": "generate",
            "Path": "/mnt/autor_name/haoTingDeWenJianJia/GPT2-Chinese/generate.py",
            "Implementation": "import torch\nimport torch.nn.functional as F\nimport os\nimport argparse\nfrom tqdm import trange\nfrom transformers import GPT2LMHeadModel\n\n\ndef top_k_top_p_filtering(logits, top_k=0, top_p=0.0, filter_value=-float('Inf')):\n    \"\"\" Filter a distribution of logits using top-k and/or nucleus (top-p) filtering\n        Args:\n            logits: logits distribution shape (vocabulary size)\n            top_k > 0: keep only top k tokens with highest probability (top-k filtering).\n            top_p > 0.0: keep the top tokens with cumulative probability >= top_p (nucleus filtering).\n                Nucleus filtering is described in Holtzman et al. (http://arxiv.org/abs/1904.09751)\n        From: https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317\n    \"\"\"\n    assert logits.dim() == 1  # batch size 1 for now - could be updated for more but the code would be less clear\n    top_k = min(top_k, logits.size(-1))  # Safety check\n    if top_k > 0:\n        # Remove all tokens with a probability less than the last token of the top-k\n        indices_to_remove = logits < torch.topk(logits, top_k)[0][..., -1, None]\n        logits[indices_to_remove] = filter_value\n\n    if top_p > 0.0:\n        sorted_logits, sorted_indices = torch.sort(logits, descending=True)\n        cumulative_probs = torch.cumsum(F.softmax(sorted_logits, dim=-1), dim=-1)\n\n        # Remove tokens with cumulative probability above the threshold\n        sorted_indices_to_remove = cumulative_probs > top_p\n        # Shift the indices to the right to keep also the first token above the threshold\n        sorted_indices_to_remove[..., 1:] = sorted_indices_to_remove[..., :-1].clone()\n        sorted_indices_to_remove[..., 0] = 0\n\n        indices_to_remove = sorted_indices[sorted_indices_to_remove]\n        logits[indices_to_remove] = filter_value\n    return logits\n\n\ndef sample_sequence(model, context, length, n_ctx, tokenizer, temperature=1.0, top_k=30, top_p=0.0, repitition_penalty=1.0,\n                    device='cpu'):\n    context = torch.tensor(context, dtype=torch.long, device=device)\n    context = context.unsqueeze(0)\n    generated = context\n    with torch.no_grad():\n        for _ in trange(length):\n            inputs = {'input_ids': generated[0][-(n_ctx - 1):].unsqueeze(0)}\n            outputs = model(\n                **inputs)  # Note: we could also use 'past' with GPT-2/Transfo-XL/XLNet (cached hidden-states)\n            next_token_logits = outputs[0][0, -1, :]\n            for id in set(generated):\n                next_token_logits[id] /= repitition_penalty\n            next_token_logits = next_token_logits / temperature\n            next_token_logits[tokenizer.convert_tokens_to_ids('[UNK]')] = -float('Inf')\n            filtered_logits = top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)\n            next_token = torch.multinomial(F.softmax(filtered_logits, dim=-1), num_samples=1)\n            generated = torch.cat((generated, next_token.unsqueeze(0)), dim=1)\n    return generated.tolist()[0]\n\n\ndef fast_sample_sequence(model, context, length, temperature=1.0, top_k=30, top_p=0.0, device='cpu'):\n    inputs = torch.LongTensor(context).view(1, -1).to(device)\n    if len(context) > 1:\n        _, past = model(inputs[:, :-1], None)[:2]\n        prev = inputs[:, -1].view(1, -1)\n    else:\n        past = None\n        prev = inputs\n    generate = [] + context\n    with torch.no_grad():\n        for i in trange(length):\n            output = model(prev, past=past)\n            output, past = output[:2]\n            output = output[-1].squeeze(0) / temperature\n            filtered_logits = top_k_top_p_filtering(output, top_k=top_k, top_p=top_p)\n            next_token = torch.multinomial(torch.softmax(filtered_logits, dim=-1), num_samples=1)\n            generate.append(next_token.item())\n            prev = next_token.view(1, 1)\n    return generate\n\n\n# 通过命令行参数--fast_pattern，指定模式\ndef generate(n_ctx, model, context, length, tokenizer, temperature=1, top_k=0, top_p=0.0, repitition_penalty=1.0, device='cpu',\n             is_fast_pattern=False):\n    if is_fast_pattern:\n        return fast_sample_sequence(model, context, length, temperature=temperature, top_k=top_k, top_p=top_p,\n                                    device=device)\n    else:\n        return sample_sequence(model, context, length, n_ctx, tokenizer=tokenizer, temperature=temperature, top_k=top_k, top_p=top_p,\n                               repitition_penalty=repitition_penalty, device=device)\n",
            "Examples": [
                "\n"
            ]
        }
    ]
}